import { precacheAndRoute } from 'workbox-precaching';

import { skipWaiting, clientsClaim, cacheNames } from 'workbox-core';

import { registerRoute } from 'workbox-routing';

import { CacheFirst } from 'workbox-strategies';

// Switch off all Workbox logs when in development environment
self.__WB_DISABLE_DEV_LOGS = true;

// The Service Worker is activated as soon as it is downloaded
skipWaiting();
// ClientsClaim forces all tabs in the scope of the service worker to be immediately controlled by this service worker
clientsClaim();

// Cache app static assets generated by webpack
precacheAndRoute(self.__WB_MANIFEST);

registerRoute( ( { request } )  => 
  request.destination === 'image',
  new CacheFirst()
)

self.addEventListener('message', async (event) => {
  console.log('service worker has received a message');

  switch (event.data.type) {
    case 'ping':
      event.source.postMessage( { type: 'sw-pinged', message: 'Service worker is pinged' });
      break;
    default: 
      event.source.postMessage( { message: 'Service worker was called without data type'});
  }
})

self.addEventListener('activate', async (event) => {
  console.log('service worker has been activated');
  let sw_client = await self.clients.matchAll();
  await sw_client.map(client => client.postMessage({ type: 'sw_activated', message: 'sw is ready'}))
})